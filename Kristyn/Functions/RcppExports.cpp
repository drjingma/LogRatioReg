// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// threshold
NumericVector threshold(const NumericVector& b1, const NumericVector& b2, const NumericVector& b3, const NumericVector& b, const NumericVector& r1, const NumericVector& r2, const NumericVector& r, const NumericVector& v1, const NumericVector& v2, const NumericVector& v3, const NumericVector& u1, const NumericVector& u2, double eps1, double eps2);
RcppExport SEXP _rare_threshold(SEXP b1SEXP, SEXP b2SEXP, SEXP b3SEXP, SEXP bSEXP, SEXP r1SEXP, SEXP r2SEXP, SEXP rSEXP, SEXP v1SEXP, SEXP v2SEXP, SEXP v3SEXP, SEXP u1SEXP, SEXP u2SEXP, SEXP eps1SEXP, SEXP eps2SEXP) {
  BEGIN_RCPP
  Rcpp::RObject rcpp_result_gen;
  Rcpp::RNGScope rcpp_rngScope_gen;
  Rcpp::traits::input_parameter< const NumericVector& >::type b1(b1SEXP);
  Rcpp::traits::input_parameter< const NumericVector& >::type b2(b2SEXP);
  Rcpp::traits::input_parameter< const NumericVector& >::type b3(b3SEXP);
  Rcpp::traits::input_parameter< const NumericVector& >::type b(bSEXP);
  Rcpp::traits::input_parameter< const NumericVector& >::type r1(r1SEXP);
  Rcpp::traits::input_parameter< const NumericVector& >::type r2(r2SEXP);
  Rcpp::traits::input_parameter< const NumericVector& >::type r(rSEXP);
  Rcpp::traits::input_parameter< const NumericVector& >::type v1(v1SEXP);
  Rcpp::traits::input_parameter< const NumericVector& >::type v2(v2SEXP);
  Rcpp::traits::input_parameter< const NumericVector& >::type v3(v3SEXP);
  Rcpp::traits::input_parameter< const NumericVector& >::type u1(u1SEXP);
  Rcpp::traits::input_parameter< const NumericVector& >::type u2(u2SEXP);
  Rcpp::traits::input_parameter< double >::type eps1(eps1SEXP);
  Rcpp::traits::input_parameter< double >::type eps2(eps2SEXP);
  rcpp_result_gen = Rcpp::wrap(threshold(b1, b2, b3, b, r1, r2, r, v1, v2, v3, u1, u2, eps1, eps2));
  return rcpp_result_gen;
  END_RCPP
}
// pri_Resid
double pri_Resid(const NumericVector& b1, const NumericVector& b2, const NumericVector& b3, const NumericVector& b, const NumericVector& r1, const NumericVector& r2, const NumericVector& r);
RcppExport SEXP _rare_pri_Resid(SEXP b1SEXP, SEXP b2SEXP, SEXP b3SEXP, SEXP bSEXP, SEXP r1SEXP, SEXP r2SEXP, SEXP rSEXP) {
  BEGIN_RCPP
  Rcpp::RObject rcpp_result_gen;
  Rcpp::RNGScope rcpp_rngScope_gen;
  Rcpp::traits::input_parameter< const NumericVector& >::type b1(b1SEXP);
  Rcpp::traits::input_parameter< const NumericVector& >::type b2(b2SEXP);
  Rcpp::traits::input_parameter< const NumericVector& >::type b3(b3SEXP);
  Rcpp::traits::input_parameter< const NumericVector& >::type b(bSEXP);
  Rcpp::traits::input_parameter< const NumericVector& >::type r1(r1SEXP);
  Rcpp::traits::input_parameter< const NumericVector& >::type r2(r2SEXP);
  Rcpp::traits::input_parameter< const NumericVector& >::type r(rSEXP);
  rcpp_result_gen = Rcpp::wrap(pri_Resid(b1, b2, b3, b, r1, r2, r));
  return rcpp_result_gen;
  END_RCPP
}
// dual_Resid
double dual_Resid(const NumericVector& b0, const NumericVector& b, const NumericVector& r0, const NumericVector& r, double rho);
RcppExport SEXP _rare_dual_Resid(SEXP b0SEXP, SEXP bSEXP, SEXP r0SEXP, SEXP rSEXP, SEXP rhoSEXP) {
  BEGIN_RCPP
  Rcpp::RObject rcpp_result_gen;
  Rcpp::RNGScope rcpp_rngScope_gen;
  Rcpp::traits::input_parameter< const NumericVector& >::type b0(b0SEXP);
  Rcpp::traits::input_parameter< const NumericVector& >::type b(bSEXP);
  Rcpp::traits::input_parameter< const NumericVector& >::type r0(r0SEXP);
  Rcpp::traits::input_parameter< const NumericVector& >::type r(rSEXP);
  Rcpp::traits::input_parameter< double >::type rho(rhoSEXP);
  rcpp_result_gen = Rcpp::wrap(dual_Resid(b0, b, r0, r, rho));
  return rcpp_result_gen;
  END_RCPP
}
// objval
double objval(const arma::mat& X, const arma::mat& y, const NumericVector& b, const NumericVector& r, double lam, double alpha, int n, int t_size);
RcppExport SEXP _rare_objval(SEXP XSEXP, SEXP ySEXP, SEXP bSEXP, SEXP rSEXP, SEXP lamSEXP, SEXP alphaSEXP, SEXP nSEXP, SEXP t_sizeSEXP) {
  BEGIN_RCPP
  Rcpp::RObject rcpp_result_gen;
  Rcpp::RNGScope rcpp_rngScope_gen;
  Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
  Rcpp::traits::input_parameter< const arma::mat& >::type y(ySEXP);
  Rcpp::traits::input_parameter< const NumericVector& >::type b(bSEXP);
  Rcpp::traits::input_parameter< const NumericVector& >::type r(rSEXP);
  Rcpp::traits::input_parameter< double >::type lam(lamSEXP);
  Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
  Rcpp::traits::input_parameter< int >::type n(nSEXP);
  Rcpp::traits::input_parameter< int >::type t_size(t_sizeSEXP);
  rcpp_result_gen = Rcpp::wrap(objval(X, y, b, r, lam, alpha, n, t_size));
  return rcpp_result_gen;
  END_RCPP
}
// our_solver
List our_solver(const arma::mat& X, const arma::mat& y, const arma::mat& Q, const arma::mat& E, const NumericVector& lam, double alpha, double rho, double eps1, double eps2, int maxite);
RcppExport SEXP _rare_our_solver(SEXP XSEXP, SEXP ySEXP, SEXP QSEXP, SEXP ESEXP, SEXP lamSEXP, SEXP alphaSEXP, SEXP rhoSEXP, SEXP eps1SEXP, SEXP eps2SEXP, SEXP maxiteSEXP) {
  BEGIN_RCPP
  Rcpp::RObject rcpp_result_gen;
  Rcpp::RNGScope rcpp_rngScope_gen;
  Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
  Rcpp::traits::input_parameter< const arma::mat& >::type y(ySEXP);
  Rcpp::traits::input_parameter< const arma::mat& >::type Q(QSEXP);
  Rcpp::traits::input_parameter< const arma::mat& >::type E(ESEXP);
  Rcpp::traits::input_parameter< const NumericVector& >::type lam(lamSEXP);
  Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
  Rcpp::traits::input_parameter< double >::type rho(rhoSEXP);
  Rcpp::traits::input_parameter< double >::type eps1(eps1SEXP);
  Rcpp::traits::input_parameter< double >::type eps2(eps2SEXP);
  Rcpp::traits::input_parameter< int >::type maxite(maxiteSEXP);
  rcpp_result_gen = Rcpp::wrap(our_solver(X, y, Q, E, lam, alpha, rho, eps1, eps2, maxite));
  return rcpp_result_gen;
  END_RCPP
}
// svdA
arma::mat svdA(const arma::sp_mat& A);
RcppExport SEXP _rare_svdA(SEXP ASEXP) {
  BEGIN_RCPP
  Rcpp::RObject rcpp_result_gen;
  Rcpp::RNGScope rcpp_rngScope_gen;
  Rcpp::traits::input_parameter< const arma::sp_mat& >::type A(ASEXP);
  rcpp_result_gen = Rcpp::wrap(svdA(A));
  return rcpp_result_gen;
  END_RCPP
}
// svdX
arma::mat svdX(const arma::mat& X, double rho);
RcppExport SEXP _rare_svdX(SEXP XSEXP, SEXP rhoSEXP) {
  BEGIN_RCPP
  Rcpp::RObject rcpp_result_gen;
  Rcpp::RNGScope rcpp_rngScope_gen;
  Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
  Rcpp::traits::input_parameter< double >::type rho(rhoSEXP);
  rcpp_result_gen = Rcpp::wrap(svdX(X, rho));
  return rcpp_result_gen;
  END_RCPP
}
// find_leaves
arma::Col<int> find_leaves(int ind, const arma::Mat<int>& merge);
RcppExport SEXP _rare_find_leaves(SEXP indSEXP, SEXP mergeSEXP) {
  BEGIN_RCPP
  Rcpp::RObject rcpp_result_gen;
  Rcpp::RNGScope rcpp_rngScope_gen;
  Rcpp::traits::input_parameter< int >::type ind(indSEXP);
  Rcpp::traits::input_parameter< const arma::Mat<int>& >::type merge(mergeSEXP);
  rcpp_result_gen = Rcpp::wrap(find_leaves(ind, merge));
  return rcpp_result_gen;
  END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
  {"_rare_threshold", (DL_FUNC) &_rare_threshold, 14},
  {"_rare_pri_Resid", (DL_FUNC) &_rare_pri_Resid, 7},
  {"_rare_dual_Resid", (DL_FUNC) &_rare_dual_Resid, 5},
  {"_rare_objval", (DL_FUNC) &_rare_objval, 8},
  {"_rare_our_solver", (DL_FUNC) &_rare_our_solver, 10},
  {"_rare_svdA", (DL_FUNC) &_rare_svdA, 1},
  {"_rare_svdX", (DL_FUNC) &_rare_svdX, 2},
  {"_rare_find_leaves", (DL_FUNC) &_rare_find_leaves, 2},
  {NULL, NULL, 0}
};

RcppExport void R_init_rare(DllInfo *dll) {
  R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
  R_useDynamicSymbols(dll, FALSE);
}